<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="company">

	<!-- compId를 통해서 하나의 Company 정보 가져오기 -->
	<select id="selectCompanyOne" parameterType="string" resultType="company">
		select c.*, to_char(date_of_establishment, 'yyyy-mm-dd') as doe from company c where comp_id = #{compId} and del_flag = 'N'
	</select>
	
	<!-- company 수정 -->
	<update id="updateCompany" parameterType="company">
		update company set comp_name=#{compName},representive=#{representive},license_no=#{licenseNo},date_of_establishment=to_date(#{dateOfEstablishment},'yyyy-mm-dd'),
		category=#{category},main_bussiness=#{mainBussiness},classification=#{classification},capital=#{capital},listed=#{listed},introduction=#{introduction},
		personnel=#{personnel},phone=#{phone},fax=#{fax},homepage=#{homepage},bussiness_scale=#{bussinessScale},location=#{location}
		where comp_id=#{compId}
	</update>
	
	<!-- compId를 통해서 인사담당자 리스트 가져오기 -->
	<select id="selectHRManagerList" parameterType="string" resultType="hrManager">
		select * from humanresources where comp_id = #{compId} order by enrolldate
	</select>
	
	<!-- compId를 통해서 매출액 리스트 가져오기 -->
	<select id="selectSalesList" parameterType="string" resultType="sales">
		select * from sales where comp_id = #{compId} order by year desc
	</select>
	
	<!-- HrManager 삭제 -->
	<delete id="deleteHrManager" parameterType="_int">
		delete from humanresources where no = #{no}
	</delete>
	
	<!-- HrManager 추가 -->
	<insert id="insertHrManager" parameterType="hrManager">
		insert into humanresources values (seq_hr_no.nextval,#{compId},#{name},#{department},#{position},#{phone},#{email},default)
	</insert>
	
	<!-- HrManager 업데이트 -->
	<update id="updateHrManager" parameterType="hrManager">
		update humanresources set name = #{name}, department = #{department}, position = #{position}, phone = #{phone}, email = #{email}
		where comp_Id = #{compId} and no = #{no}
	</update>
	
	<!-- Sales 업데이트 -->
	<update id="updateSales" parameterType="sales">
		update sales set sales=#{sales} where comp_id=#{compId} and year=#{year}
	</update>
	
	<!-- Sales 추가 -->
	<insert id="insertSales">
		insert into sales values (#{compId},#{year},#{sales})
	</insert>
	
	<!-- Sales 삭제 -->
	<delete id="deleteSales" parameterType="sales">
		delete from sales where comp_id=#{compId} and year=#{year}
	</delete>
	
	<!-- Location List 선택 -->
	<select id="selectLocationList" parameterType="string" resultType="location">
		select * from location where comp_id=#{compId} order by name
	</select>
	
	<!-- Location 추가 -->
	<select id="insertLocation" parameterType="location">
		insert into location values (#{compId},seq_location_no.nextval,#{name},#{address},#{addAddress},#{etc})
	</select>
	
	<!-- Location 삭제 -->
	<delete id="deleteLocation" parameterType="location">
		delete from location where no = #{no}
	</delete>
	
	<!-- Location 수정 -->
	<update id="updateLocation" parameterType="location">
		update location set name=#{name}, address=#{address}, add_address=#{addAddress}, etc=#{etc} where comp_id=#{compId} and no=#{no}
	</update>
	
	<!-- 지원한 회사 List 가져오기 -->
	<select id="selectCompanyAppList" parameterType="string" resultType="ca">
		select * from companyapplication where comp_id=#{compId}
	</select>
	
	<!-- 지원자 정보 가져오기 -->
	<select id="selectApplicant" parameterType="map" resultMap="AppList">
		select 
			p.*,
			(to_char(sysdate,'yyyy')-substr(p.birth,1,4))+1 as age,
			(select count(*) from favorites where comp_id=#{compId} and member_id=#{memberId} and select_no=1) count,
			c.hireddate,
			c.retireddate
		from profile p 
			left join career c on p.member_id=c.member_id
		where p.member_id=#{memberId}
	</select>
	<resultMap type="profile" id="AppList">
		<id column="member_id" property="memberId"/>
		<result column="userresumetitle" property="userresumetitle"/>
		<result column="name" property="name"/>
		<result column="birth" property="birth"/>
		<result column="gender" property="gender"/>
		<result column="age" property="age"/>
		<result column="count" property="count"/>
 		<association javaType="career" property="career">
			<result column="hireddate" property="hireddate"/>
			<result column="retireddate" property="retireddate"/>
		</association>
	</resultMap>
	
	<!-- 관심인재 삭제 -->
	<delete id="deleteFavorite" parameterType="map">
		delete from favorites 
		where member_id=#{memberId} and comp_id=#{compId} 
		<if test="recruitmentNo != 0">
		and recruitment_no=#{recruitmentNo}
		</if>
	</delete>
	
	<!-- 관심인재 추가 -->
	<insert id="insertFavorite" parameterType="map">
		insert into favorites values (seq_favorites_no.nextval,#{memberId},#{recruitmentNo},#{compId},1)
	</insert>
	
	<!-- 관심인재 리스트 가져오기 -->
	<select id="selectFavoriteAppList" parameterType="string" resultMap="FavoriteList">
		select 
			distinct f.member_id,
			c.*,
			p.*,
			(to_char(sysdate,'yyyy')-substr(p.birth,1,4))+1 age
		from favorites f
			left join career c on f.member_id=c.member_id 
			left join profile p on f.member_id=p.member_id
		where f.comp_id=#{compId}
	</select>
	<resultMap type="favorites" id="FavoriteList">
		<id column="favorite_no" property="favoriteNo"/>
		<result column="select_no" property="selectNo"/>
		<result column="comp_id" property="compId"/>
		<result column="member_id" property="memberId"/>
 		<association javaType="career" property="career">
			<result column="hireddate" property="hireddate"/>
			<result column="retireddate" property="retireddate"/>
		</association>
 		<association javaType="profile" property="profile">
			<result column="userresumetitle" property="userresumetitle"/>
			<result column="name" property="name"/>
			<result column="birth" property="birth"/>
			<result column="gender" property="gender"/>
			<result column="age" property="age"/>
		</association>
	</resultMap>
	
	<!-- 모집직종 정보1 가져오기 -->
	<select id="selectJobList" resultType="Job">
		SELECT DISTINCT JOB1 FROM JOB
	</select>
	
	<!-- 모집직종 정보2 가져오기 -->
	<select id="selectJobList2" resultType="Job">
		SELECT DISTINCT * FROM JOB
	</select>
	
	<!-- 모집직급/직책 정보 가져오기 -->
	<select id="selectPositionList" resultType="Position">
		SELECT * FROM POSITION
	</select>
	
	<!-- 컴퓨터활용정보-1 가져오기 -->
	<select id="selectComputerAbllityList" resultType="ComputerAbllity">
		SELECT DISTINCT DIVISION FROM COMPUTERABLLITY
	</select>
	
	<!-- 컴퓨터활용정보-2 가져오기 -->
	<select id="selectComputerAbllityList2" resultType="ComputerAbllity">
		SELECT * FROM COMPUTERABLLITY
	</select>
	
	<!-- 기업공고 등록하기 -->
	<insert id="insertRecruitment" parameterType="Recruitment">
		INSERT INTO RECRUITMENT VALUES(SEQ_RECRT_NO.NEXTVAL, #{compId},#{recruitmentTitle},#{employmentType},#{typeOfOccupation},'',#{asignedTask},#{recruitmentPersonnel},#{position},#{department},'',#{career},#{education},#{etcQualificationRequirement},#{employmentPreference},#{applicantAgeStart},'','',#{applicationMethod}, #{applicationForm}, #{recruitmentStage},'',#{location}, #{payCondition}, #{nearbyStation}, #{welfare}, 0, #{openingDate},#{closingDate},#{applicantAgeEnd},#{certificate}, #{major},#{workDay},'N','현재컬럼삭제예정',#{foreLang},#{summernoteHtml},#{salaryType},#{locationCode},#{genderCut})
	</insert>
	
	<!-- 지하철노선도-구분 가져오기 -->
	<select id="selectSubwayStation" resultType="SubwayStation">
		SELECT DISTINCT LINE_NAME FROM SUBWAYSTATION
	</select>
	
	<!-- 지하철노선도-역이름 가져오기 -->
	<select id="selectSubwayStationAll" resultType="SubwayStation">
		SELECT * FROM SUBWAYSTATION
	</select>

	<!-- 채용정보 리스트 가져오기 -->
	<select id="selectRcrtList" parameterType="string" resultType="recruitment">
		select 
		r.*,
		(select count(*) from companyapplication where recruitment_no=r.recruitment_no) count,
		(select count(*) from companyapplication where recruitment_no=r.recruitment_no and read='N') not_read_count
		from recruitment r where comp_id=#{compId} and end='N'
	</select>
	
	<!-- 지원자 아이디 가져오기 -->
	<select id="selectApplicantIdList" parameterType="_int" resultType="string">
		select member_id from companyapplication where recruitment_no=#{recruitment_no}
	</select>
	
	<!-- 이력서, 내가지원한회사, 관심인재, 멤버 정보 모두 다 담기 -->
	<select id="selectApplicantWithAllInfo">
		select * from member where 
	</select>
	
	<!-- 해당 채용공고 가져오기 -->
	<select id="selectRecruitmentOne" parameterType="_int" resultType="recruitment">
		select * from recruitment where recruitment_no=#{recruitmentNo} and end='N'
	</select>
	
	<!-- 해당 채용공고를 제외한 채용공고리스트 가져오기 -->
	<select id="selectRcrtListNotThis" parameterType="map" resultType="recruitment">
		select * from recruitment where comp_id=#{compId} and not recruitment_no=#{recruitmentNo} and end='N'
	</select>
	
	<!-- 마감된 채용공고 리스트 가져오기 -->
	<select id="selectRcrtEndList" parameterType="string" resultType="recruitment">
		select * from recruitment where comp_id=#{compId} and end='Y'
	</select>
	
	<!-- 채용공고 마감하기 -->
	<update id="updateRcrtEnd" parameterType="_int">
		update recruitment set end='Y' where recruitment_no=#{recruitmentNo}
	</update>
	
	<!-- 기업 로고 s3 주소로 등록 -->
	<update id="updateCompanyLogo" parameterType="map">
		update company set logo_s3=#{path} where comp_id=#{compId}
	</update>
	
	<!-- 채용공고에 지원한 지원자 리스트 가져오기 -->
	<select id="selectAppList" resultMap="ApplicantList" parameterType="_int">
		select 
			(to_char(sysdate,'yyyy')-substr(birth,1,4))+1 age,
			(select count(*) from favorites where comp_id=ca.comp_Id and member_id=ca.member_id and select_no=1) count,
            p.member_id,
			p.name,
			p.gender,
			ca.read,
			ca.cu_resdate,
            ca.recruitment_no,
            ca.comp_id,
			e.schoolname,
			e.score,
			e.totalscore,
			c.hireddate,
			c.retireddate,
			h.wantpay
		from
			profile p
				left join education e on p.member_id=e.member_id
				left join career c on p.member_id=c.member_id
				left join hopework h on p.member_id=h.member_id
                left join companyapplication ca on p.member_id=ca.member_id
		where ca.recruitment_no=#{recruitmentNo}
	</select>
	<resultMap type="profile" id="ApplicantList">
		<id column="member_id" property="memberId"/>
		<result column="name" property="name"/>
      	<result column="age" property="age"/>
      	<result column="gender" property="gender"/>
 		<association javaType="ca" property="ca">
			<result column="cu_resdate" property="cuResdate"/>
			<result column="read" property="read"/>
		</association>
 		<association javaType="education" property="education">
			<result column="schoolname" property="schoolname"/>
			<result column="score" property="score"/>
			<result column="totalscore" property="totalscore"/>
		</association>
 		<association javaType="career" property="career">
			<result column="hireddate" property="hireddate"/>
			<result column="retireddate" property="retireddate"/>
		</association>
 		<association javaType="hopework" property="hopework">
			<result column="wantpay" property="wantpay"/>
		</association>
	</resultMap>
	
	<!-- 지역정보 가져오기 -->
	<select id="selectLocationcodeList" parameterType="_int" resultType="area">
		SELECT LOCATION_CODE, LOCATION_NAME FROM AREA WHERE LOCATION_TOTAL_CODE = #{param}
	</select>
	
	<!-- 조회한 채용공고 정보 가져오기 -->
	<select id="joinRecruitment" parameterType="_int" resultType="recruitment">
		SELECT * FROM RECRUITMENT WHERE RECRUITMENT_NO = #{RECRUITMENT_NO}
	</select>

	<!-- 지원자 상세보기 하면 read = Y 로 업데이트 -->
	<update id="updateCARead" parameterType="map">
		update companyapplication set read = 'Y' where comp_id=#{compId} and member_id=#{memberId}
	</update>

</mapper>